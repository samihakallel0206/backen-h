//controllers/activityViewController.js
const ActivityViewService = require("../services/activityViewService");
const NotificationActivityService = require("../services/notificationActivityService");

// ‚úÖ R√âCUP√âRER LES ACTIVIT√âS NON CONSULT√âES
const getUnviewedActivities = async (req, res) => {
    try {
        const userId = req.user.id;

        const result = await NotificationActivityService.getUnviewedActivities(userId);

        res.status(200).json({
            success: true,
            unviewedActivities: result.notifications,
            unviewedActivityIds: result.activityIds,
            count: result.activityIds.length
        });
    } catch (error) {
        console.error("‚ùå Get unviewed activities error:", error);
        res.status(500).json({ 
            errors: [{ msg: "Erreur lors de la r√©cup√©ration des activit√©s non consult√©es" }] 
        });
    }
};

// ‚úÖ V√âRIFIER SI UNE ACTIVIT√â EST NOUVELLE POUR L'UTILISATEUR
const checkActivityViewStatus = async (req, res) => {
    try {
        const { activityId } = req.params;
        const userId = req.user.id;

        // ‚úÖ CORRECTION : Utiliser ActivityViewService au lieu de NotificationActivityService
        const isNew = await ActivityViewService.isActivityNewForUser(activityId, userId);

        console.log(`üîç V√©rification statut activit√© ${activityId} pour utilisateur ${userId}: ${isNew}`);

        res.status(200).json({
            success: true,
            isNewActivity: isNew,
            activityId: activityId
        });
    } catch (error) {
        console.error("‚ùå Check activity view status error:", error);
        res.status(500).json({ 
            success: false,
            errors: [{ msg: "Erreur lors de la v√©rification du statut de l'activit√©" }],
            isNewActivity: false
        });
    }
};

// ‚úÖ MARQUER UNE ACTIVIT√â COMME CONSULT√âE
const markActivityAsViewed = async (req, res) => {
    try {
        const { activityId } = req.params;
        const userId = req.user.id;

        const updatedCount = await ActivityViewService.markActivityAsViewed(activityId, userId);

        console.log(`‚úÖ Activit√© ${activityId} marqu√©e comme vue par l'utilisateur ${userId}`);

        res.status(200).json({
            success: true,
            message: "Activit√© marqu√©e comme consult√©e",
            updatedCount
        });
    } catch (error) {
        console.error("‚ùå Mark activity as viewed error:", error);
        res.status(500).json({ 
            success: false,
            errors: [{ msg: "Erreur lors du marquage de l'activit√©" }] 
        });
    }
};

module.exports = {
    getUnviewedActivities,
    checkActivityViewStatus,
    markActivityAsViewed
};