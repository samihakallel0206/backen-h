// services/activityViewService.js

const NotificationActivity = require("../models/NotificationActivity");
const Activity = require("../models/Activity");

class ActivityViewService {
    
    // ‚úÖ METHODE MANQUANTE : V√©rifier si une activit√© est NOUVELLE pour l'utilisateur
    static async isActivityNewForUser(activityId, userId) {
        try {
            console.log(`üîç V√©rification si activit√© ${activityId} est nouvelle pour utilisateur ${userId}`);
            
            // V√©rifier s'il existe une notification NON VUE pour cette activit√©
            const unviewedNotification = await NotificationActivity.findOne({
                recipient: userId,
                activity: activityId,
                activity_viewed: false,
                type: { 
                    $in: [
                        'activity_created_public', 
                        'activity_created_identified', 
                        'identified_in_activity'
                    ] 
                }
            });

            const isNew = !!unviewedNotification;
            console.log(`üìä Activit√© ${activityId} est nouvelle: ${isNew}`);
            
            return isNew;
            
        } catch (error) {
            console.error('‚ùå Erreur v√©rification activit√© nouvelle:', error);
            return false; // En cas d'erreur, consid√©rer comme non nouvelle
        }
    }

    // ‚úÖ Marquer une activit√© comme vue (quand l'utilisateur consulte l'activit√©)
    static async markActivityAsViewed(activityId, userId) {
        try {
            console.log(`üëÅÔ∏è Marquage activit√© ${activityId} comme vue par utilisateur ${userId}`);
            
            // Marquer toutes les notifications li√©es √† cette activit√© comme "activit√© vue"
            const result = await NotificationActivity.updateMany(
                {
                    recipient: userId,
                    activity: activityId,
                    activity_viewed: false
                },
                {
                    $set: { 
                        activity_viewed: true,
                        is_read: true // ‚úÖ Marquer aussi comme lue
                    }
                }
            );

            console.log(`‚úÖ ${result.modifiedCount} notifications marqu√©es comme vues pour l'activit√© ${activityId}`);
            return result.modifiedCount;
            
        } catch (error) {
            console.error('‚ùå Erreur marquage activit√© vue:', error);
            throw error;
        }
    }

    // ‚úÖ R√©cup√©rer le compteur de NOUVELLES ACTIVIT√âS non consult√©es
    static async getUnviewedActivitiesCount(userId) {
        try {
            // Compter les activit√©s avec des notifications non consult√©es
            const unviewedCount = await NotificationActivity.countDocuments({
                recipient: userId,
                activity_viewed: false,
                // Seulement les notifications de nouvelles activit√©s, pas les likes/commentaires
                type: { 
                    $in: [
                        'activity_created_public', 
                        'activity_created_identified', 
                        'identified_in_activity'
                    ] 
                }
            });

            console.log(`üìä ${unviewedCount} activit√©s non consult√©es pour l'utilisateur ${userId}`);
            return unviewedCount;

        } catch (error) {
            console.error('‚ùå Erreur comptage activit√©s non consult√©es:', error);
            return 0; // Retourner 0 en cas d'erreur
        }
    }

    // ‚úÖ Marquer TOUTES les activit√©s comme consult√©es
    static async markAllActivitiesAsViewed(userId) {
        try {
            const result = await NotificationActivity.updateMany(
                {
                    recipient: userId,
                    activity_viewed: false,
                    type: { 
                        $in: [
                            'activity_created_public', 
                            'activity_created_identified', 
                            'identified_in_activity'
                        ] 
                    }
                },
                {
                    $set: { 
                        activity_viewed: true,
                        is_read: true
                    }
                }
            );

            console.log(`‚úÖ ${result.modifiedCount} activit√©s marqu√©es comme consult√©es pour l'utilisateur ${userId}`);
            return result.modifiedCount;

        } catch (error) {
            console.error('‚ùå Erreur marquage toutes activit√©s consult√©es:', error);
            throw error;
        }
    }

    // ‚úÖ V√©rifier si une activit√© sp√©cifique a √©t√© consult√©e
    static async isActivityViewed(activityId, userId) {
        try {
            const notification = await NotificationActivity.findOne({
                recipient: userId,
                activity: activityId,
                activity_viewed: true
            });

            return !!notification; // Retourne true si au moins une notification est marqu√©e comme vue
        } catch (error) {
            console.error('‚ùå Erreur v√©rification activit√© consult√©e:', error);
            return false;
        }
    }

    // ‚úÖ R√©cup√©rer les IDs des activit√©s non consult√©es
    static async getUnviewedActivityIds(userId) {
        try {
            const unviewedNotifications = await NotificationActivity.find({
                recipient: userId,
                activity_viewed: false,
                type: { 
                    $in: [
                        'activity_created_public', 
                        'activity_created_identified', 
                        'identified_in_activity'
                    ] 
                }
            }).select('activity').distinct('activity');

            return unviewedNotifications;
        } catch (error) {
            console.error('‚ùå Erreur r√©cup√©ration IDs activit√©s non consult√©es:', error);
            return [];
        }
    }
}

module.exports = ActivityViewService;