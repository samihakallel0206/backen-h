// services/notificationActivityService.js

const NotificationActivity = require("../models/NotificationActivity");
const User = require("../models/User");

class NotificationActivityService {
    
    // ‚úÖ NOTIFIER TOUS LES UTILISATEURS POUR UNE ACTIVIT√â PUBLIQUE
    static async notifyPublicActivity(activity, creator) {
        try {
            console.log(`üì¢ Notification activit√© publique: ${activity._id}`);
            
            // R√©cup√©rer tous les utilisateurs sauf le cr√©ateur
            const users = await User.find({ 
                _id: { $ne: creator._id } 
            }).select('_id name');
            
            console.log(`üë• Envoi √† ${users.length} utilisateurs`);

            const notifications = users.map(user => ({
                recipient: user._id,
                sender: creator._id,
                activity: activity._id,
                type: 'activity_created_public',
                title: 'ŸÜÿ¥ÿßÿ∑ ÿ¨ÿØŸäÿØ',
                message: `${creator.name} ŸÜÿ¥ÿ± ŸÜÿ¥ÿßÿ∑Ÿãÿß ÿ¨ÿØŸäÿØŸãÿß: "${activity.activity_subject}"`,
                metadata: {
                    activity_subject: activity.activity_subject,
                    creator_name: creator.name,
                    activity_type: activity.general_activity
                }
            }));

            // Ins√©rer en lot
            if (notifications.length > 0) {
                await NotificationActivity.insertMany(notifications);
                console.log(`‚úÖ ${notifications.length} notifications publiques cr√©√©es`);
            }

            return notifications.length;
        } catch (error) {
            console.error('‚ùå Erreur notification publique:', error);
            throw error;
        }
    }

    // ‚úÖ NOTIFIER LES UTILISATEURS IDENTIFI√âS
    static async notifyIdentifiedUsers(activity, creator, identifiedUsers) {
        try {
            console.log(`üéØ Notification utilisateurs identifi√©s: ${activity._id}`);
            
            const notifications = identifiedUsers.map(identifiedUser => ({
                recipient: identifiedUser.user,
                sender: creator._id,
                activity: activity._id,
                type: 'activity_created_identified',
                title: 'ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿØŸÉ ŸÅŸä ŸÜÿ¥ÿßÿ∑',
                message: `${creator.name} ÿ≠ÿØÿØŸÉ ŸÅŸä ŸÜÿ¥ÿßÿ∑: "${activity.activity_subject}"`,
                metadata: {
                    activity_subject: activity.activity_subject,
                    creator_name: creator.name,
                    activity_type: activity.general_activity
                }
            }));

            if (notifications.length > 0) {
                await NotificationActivity.insertMany(notifications);
                console.log(`‚úÖ ${notifications.length} notifications utilisateurs identifi√©s cr√©√©es`);
            }

            return notifications.length;
        } catch (error) {
            console.error('‚ùå Erreur notification utilisateurs identifi√©s:', error);
            throw error;
        }
    }

// ‚úÖ NOTIFIER LES UTILISATEURS IDENTIFI√âS
    static async notifyIdentifiedUsers(activity, creator, identifiedUsers) {
        try {
            console.log(`üéØ Notification utilisateurs identifi√©s: ${activity._id}`);
            
            const notifications = identifiedUsers.map(identifiedUser => ({
                recipient: identifiedUser.user,
                sender: creator._id,
                activity: activity._id,
                type: 'activity_created_identified',
                title: 'ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿØŸÉ ŸÅŸä ŸÜÿ¥ÿßÿ∑',
                message: `${creator.name} ÿ≠ÿØÿØŸÉ ŸÅŸä ŸÜÿ¥ÿßÿ∑: "${activity.activity_subject}"`,
                metadata: {
                    activity_subject: activity.activity_subject,
                    creator_name: creator.name,
                    activity_type: activity.general_activity
                }
            }));

            if (notifications.length > 0) {
                await NotificationActivity.insertMany(notifications);
                console.log(`‚úÖ ${notifications.length} notifications utilisateurs identifi√©s cr√©√©es`);
            }

            return notifications.length;
        } catch (error) {
            console.error('‚ùå Erreur notification utilisateurs identifi√©s:', error);
            throw error;
        }
    }

    // ‚úÖ NOTIFICATION POUR LIKE D'ACTIVIT√â
    static async notifyActivityLike(activity, liker, activityOwner) {
        try {
            // Ne pas notifier si l'utilisateur like sa propre activit√©
            if (liker._id.toString() === activityOwner._id.toString()) {
                return null;
            }

            const notification = new NotificationActivity({
                recipient: activityOwner._id,
                sender: liker._id,
                activity: activity._id,
                type: 'activity_like',
                title: 'ÿ•ÿπÿ¨ÿßÿ® ÿ¨ÿØŸäÿØ',
                message: `${liker.name} ÿ£ÿπÿ¨ÿ® ÿ®ŸÜÿ¥ÿßÿ∑ŸÉ: "${activity.activity_subject}"`,
                metadata: {
                    activity_subject: activity.activity_subject,
                    liker_name: liker.name
                }
            });

            await notification.save();
            console.log(`‚ù§Ô∏è Notification like envoy√©e √† ${activityOwner.name}`);

            return notification;
        } catch (error) {
            console.error('‚ùå Erreur notification like:', error);
            throw error;
        }
    }

    // ‚úÖ NOTIFICATION POUR NOUVEAU COMMENTAIRE
    static async notifyNewComment(activity, commenter, activityOwner, commentContent) {
        try {
            // Ne pas notifier si l'utilisateur commente sa propre activit√©
            if (commenter._id.toString() === activityOwner._id.toString()) {
                return null;
            }

            const truncatedComment = commentContent.length > 50 
                ? commentContent.substring(0, 50) + '...' 
                : commentContent;

            const notification = new NotificationActivity({
                recipient: activityOwner._id,
                sender: commenter._id,
                activity: activity._id,
                type: 'activity_comment',
                title: 'ÿ™ÿπŸÑŸäŸÇ ÿ¨ÿØŸäÿØ',
                message: `${commenter.name} ÿπŸÑŸÇ ÿπŸÑŸâ ŸÜÿ¥ÿßÿ∑ŸÉ: "${truncatedComment}"`,
                metadata: {
                    activity_subject: activity.activity_subject,
                    commenter_name: commenter.name,
                    comment_preview: truncatedComment
                }
            });

            await notification.save();
            console.log(`üí¨ Notification commentaire envoy√©e √† ${activityOwner.name}`);

            return notification;
        } catch (error) {
            console.error('‚ùå Erreur notification commentaire:', error);
            throw error;
        }
    }

    // ‚úÖ NOTIFICATION POUR R√âPONSE √Ä COMMENTAIRE
    static async notifyCommentReply(activity, replier, commentOwner, replyContent, originalComment) {
        try {
            // Ne pas notifier si l'utilisateur r√©pond √† son propre commentaire
            if (replier._id.toString() === commentOwner._id.toString()) {
                return null;
            }

            const truncatedReply = replyContent.length > 50 
                ? replyContent.substring(0, 50) + '...' 
                : replyContent;

            const notification = new NotificationActivity({
                recipient: commentOwner._id,
                sender: replier._id,
                activity: activity._id,
                type: 'comment_reply',
                title: 'ÿ±ÿØ ÿπŸÑŸâ ÿ™ÿπŸÑŸäŸÇŸÉ',
                message: `${replier.name} ÿ±ÿØ ÿπŸÑŸâ ÿ™ÿπŸÑŸäŸÇŸÉ: "${truncatedReply}"`,
                metadata: {
                    activity_subject: activity.activity_subject,
                    replier_name: replier.name,
                    reply_preview: truncatedReply,
                    original_comment: originalComment
                }
            });

            await notification.save();
            console.log(`‚Ü©Ô∏è Notification r√©ponse envoy√©e √† ${commentOwner.name}`);

            return notification;
        } catch (error) {
            console.error('‚ùå Erreur notification r√©ponse:', error);
            throw error;
        }
    }

    // ‚úÖ R√âCUP√âRER LES ACTIVIT√âS NON CONSULT√âES
    static async getUnviewedActivities(userId) {
        try {
            const notifications = await NotificationActivity.find({
                recipient: userId,
                activity_viewed: false,
                type: { 
                    $in: [
                        'activity_created_public', 
                        'activity_created_identified', 
                        'identified_in_activity'
                    ] 
                }
            })
            .populate('sender', 'name profile_picture')
            .populate('activity', 'activity_subject general_activity')
            .sort({ createdAt: -1 });

            const activityIds = [...new Set(notifications.map(notif => notif.activity._id.toString()))];

            return {
                notifications,
                activityIds,
                count: activityIds.length
            };
        } catch (error) {
            console.error('‚ùå Erreur r√©cup√©ration activit√©s non consult√©es:', error);
            throw error;
        }
    }

    // ‚úÖ COMPTER LES ACTIVIT√âS NON CONSULT√âES
    static async getUnviewedActivitiesCount(userId) {
        try {
            const count = await NotificationActivity.countDocuments({
                recipient: userId,
                activity_viewed: false,
                type: { 
                    $in: [
                        'activity_created_public', 
                        'activity_created_identified', 
                        'identified_in_activity'
                    ] 
                }
            });

            return count;
        } catch (error) {
            console.error('‚ùå Erreur comptage activit√©s non consult√©es:', error);
            return 0;
        }
    }

    // ‚úÖ AUTRES M√âTHODES EXISTANTES
    static async getUserNotifications(userId, page = 1, limit = 20) {
        try {
            const skip = (page - 1) * limit;
            
            const notifications = await NotificationActivity.find({
                recipient: userId
            })
            .populate('sender', 'name profile_picture')
            .populate('activity', 'activity_subject general_activity user visibility')
            .sort({ createdAt: -1 })
            .skip(skip)
            .limit(limit);

            const total = await NotificationActivity.countDocuments({
                recipient: userId
            });

            return {
                notifications,
                pagination: {
                    page,
                    limit,
                    total,
                    totalPages: Math.ceil(total / limit)
                }
            };
        } catch (error) {
            console.error('‚ùå Erreur r√©cup√©ration notifications:', error);
            throw error;
        }
    }

    static async markAsRead(notificationIds, userId) {
        try {
            await NotificationActivity.updateMany(
                {
                    _id: { $in: notificationIds },
                    recipient: userId
                },
                {
                    $set: { is_read: true }
                }
            );
            
            return true;
        } catch (error) {
            console.error('‚ùå Erreur marquage notifications lues:', error);
            throw error;
        }
    }

    static async markAllAsRead(userId) {
        try {
            await NotificationActivity.updateMany(
                {
                    recipient: userId,
                    is_read: false
                },
                {
                    $set: { is_read: true }
                }
            );
            
            return true;
        } catch (error) {
            console.error('‚ùå Erreur marquage toutes notifications lues:', error);
            throw error;
        }
    }

    static async getUnreadCount(userId) {
        try {
            const unreadCount = await NotificationActivity.countDocuments({
                recipient: userId,
                is_read: false
            });
            
            return unreadCount;
        } catch (error) {
            console.error('‚ùå Erreur comptage notifications non lues:', error);
            return 0;
        }
    }

    static async deleteNotification(notificationId, userId) {
        try {
            const result = await NotificationActivity.findOneAndDelete({
                _id: notificationId,
                recipient: userId
            });

            return {
                success: !!result,
                deletedCount: result ? 1 : 0
            };
        } catch (error) {
            console.error('‚ùå Erreur suppression notification:', error);
            throw error;
        }
    }
}

module.exports = NotificationActivityService;